# Add scripts to be run during booting:
crontab -e
specify the following cron job:
@reboot nohup sudo /home/pi/ir_remote_server.py.py &

# Paho MQTT examples:
https://stackoverflow.com/questions/30836886/thread-issue-while-subscribing-to-mqtt-in-python-using-paho-mqtt
https://stackoverflow.com/questions/37006863/python-mqtt-script-on-raspberry-pi-to-send-and-receive-messages

# RPI & tempsensor web-server:
https://www.raspberrypi.org/forums/viewtopic.php?f=37&t=113411

# RPI & Grafana + INfluxDB + NodeJS
http://giatro.me/2015/09/30/install-influxdb-and-grafana-on-raspberry-pi.html
http://gridengine.eu/index.php/other-stories/230-installing-grafana-on-raspberry-pi-2-2015-10-24

# HOWTO: Move the filesystem to a USB stick/Drive
https://www.raspberrypi.org/forums/viewtopic.php?f=29&t=44177

# Examples installations for fresh SD card:
https://github.com/rlowe/raspberry

# Ansible Lighttpd deployment
https://github.com/RaymiiOrg/ansible/tree/master/lighttpd-nodes

# Real-Time Web Interface to MQTT using Socket.io and Node.js
http://embeddedtek.blogspot.fi/2015/06/real-time-web-interface-to-mqtt-using.html

# Bluetooth 4.0 comminucation between two Raspi devices
https://raspberrypi.stackexchange.com/questions/53863/error-transferring-file-from-raspberry-pi-to-other-device-using-bluetooth

# Bottle: Python web-framework 
http://bottlepy.org/docs/dev/tutorial.html
http://www.raspberry-pi-geek.com/Archive/2015/10/Raspberry-Pi-IR-remote/%28offset%29/2

# Python: push button with event trigger and callback-function
http://raspi.tv/2013/how-to-use-interrupts-with-python-on-the-raspberry-pi-and-rpi-gpio-part-2

http://www.instructables.com/id/An-inexpensive-IoT-enabler-using-ESP8266/
http://www.instructables.com/id/Low-cost-WIFI-temperature-data-logger-based-on-ESP/


# How to set-up ESP8266 with DS18B20 sensor (Arduino IDE)
https://gist.github.com/teos0009/acad7d1e54b97f4b2a88

http://vaasa.hacklab.fi/2015/01/12/esp8266-ds18b20-thingspeak-nodemcu/
http://www.jerome-bernard.com/blog/2015/10/04/wifi-temperature-sensor-with-nodemcu-esp8266/

https://www.youtube.com/watch?v=z07zjfOHb8E



# Flash ESP8266
https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/flash-firmware
https://github.com/themadinventor/esptool/
https://learn.adafruit.com/building-and-running-micropython-on-the-esp8266/flash-firmware
https://github.com/4refr0nt/ESPlorer



##########
Room_temperatures_schema.sql:

create table temperatures (
    id           integer primary key autoincrement not null,
    date         datetime,
    room         text,
    temp         real,
    hum          real
);
_____
Create_temp_table.py:

import os
import sqlite3

db_filename = 'Room_temperatures.db'
schema_filename = 'Room_temperatures_schema.sql'

db_is_new = not os.path.exists(db_filename)

with sqlite3.connect(db_filename) as conn:
    if db_is_new:
        print 'Creating schema'
        with open(schema_filename, 'rt') as f:
            schema = f.read()
        conn.executescript(schema)

        print 'Inserting initial data'
        
        conn.execute("""
        insert into temperatures (date, room, temp, hum)
        values ('2010-10-03 11:23:45', 'MH', 22, 56)
        """)
        
        conn.execute("""
        insert into temperatures (date, room, temp, hum)
        values ('2010-10-03 11:28:45', 'MH', 21, 50)
        """)
        
    else:
        print 'Database exists, assume schema does, too.'

_______
Insert_temp.py:

import sqlite3
import sys
import time

db_filename = 'Room_temperatures.db'
room_name = '%{0}'.format(sys.argv[1])

with sqlite3.connect(db_filename) as conn:
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    query = """SELECT id, date, room, temp, hum from temperatures
            where room like :room_name"""

    cursor.execute(query, {'room_name':room_name})

    for row in cursor.fetchall():
        id, date, room, temp, hum = row
        time_ = time.strptime(row['date'], "%Y-%m-%d %H:%M:%S")
        print '%2d {%s} [%-4s] (%d) (%d)' % (row['id'], row['date'], row['room'], row['hum'], row['temp'])
        print time_.tm_hour

cursor.close
conn.close()
(4:05:47 PM) mgw-team-plm@conference.wetalk.lmera.ericsson.se/Markus Savonen: 
import sqlite3
import sys
import time
import datetime

db_filename = 'Room_temperatures.db'
room_name = sys.argv[1]
temp_ = sys.argv[2]
hum_ = sys.argv[3]

with sqlite3.connect(db_filename) as conn:
    cursor = conn.cursor()
    unix = int(time.time())
    date = str(datetime.datetime.fromtimestamp(unix).strftime('%Y-%m-%d %H:%M:%S'))
    query = """INSERT INTO temperatures (date, room, temp, hum)
            values (:date, :room_name, :temp_, :hum_)"""

    cursor.execute(query, {'date':date, 'room_name':room_name, 'temp_':temp_, 'hum_':hum_})

cursor.close
conn.close()

______________
Fetch_temp.py:

import sqlite3
import sys
import time

db_filename = 'Room_temperatures.db'
room_name = '%{0}'.format(sys.argv[1])

with sqlite3.connect(db_filename) as conn:
    conn.row_factory = sqlite3.Row
    cursor = conn.cursor()
    query = """SELECT id, date, room, temp, hum from temperatures
            where room like :room_name"""

    cursor.execute(query, {'room_name':room_name})

    for row in cursor.fetchall():
        id, date, room, temp, hum = row
        time_ = time.strptime(row['date'], "%Y-%m-%d %H:%M:%S")
        print '%2d {%s} [%-4s] (%d) (%d)' % (row['id'], row['date'], row['room'], row['hum'], row['temp'])
        print time_.tm_hour

cursor.close
conn.close()

Display in HTML format:
http://sharedmemorydump.net/logging-data-temperature-with-raspberry-pi


####
Ad-blocker to Raspi:

https://pi-hole.net/
https://github.com/diginc/docker-pi-hole

###


